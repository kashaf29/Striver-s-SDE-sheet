/* Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.
We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.
You must solve this problem without using the library's sort function.
Example:
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]
*/

class Solution {
public:
 
 //sol1
    void sortColors(vector<int>& nums) {
        int low = 0; 
        int high = nums.size()-1;
        while(low<=high){
            int mid = (low+high) >> 1;
            if(nums[mid] == 0){
                swap(nums[mid] ,  nums[low]);
                low++;
                mid++;
            }
            if(nums[mid] == 1) mid++;
            if(nums[mid] == 2){
                swap(nums[mid] ,nums[high]);
                    high--; 
                }
           } 
           
           // sol2
           /*  int count0 = 0 , count1 =0, count2 = 0;
        for(int i=0; i<nums.size(); i++){
            if(nums[i]==0) count0++;
            if(nums[i]==1) count1++;
            if(nums[i]==2) count2++;
        }
        nums.clear();
        for(int i=0; i<count0; i++){
            nums.push_back(0);
        }
        for(int i=0; i<count1;i++){
            nums.push_back(1);
        }
        for(int i=0; i<count2;i++){
            nums.push_back(2);
        }   */
      };  
            
